import java.util.LinkedList;

public class ParetoOptimal {
//-----------------O(nlogn)---------------------------------------
    
    public static int[] findMedian(int[][] x, int k){
        //dont work if the list isnt there or if they want a k that doesnt exist
        if(x == null || x.length < k)
            throw new Error();
        int left = 0;
        int right = x.length-1;

        //we stop when our indicies have crossed
        while (left < right){

            int pivot = (left + right)/2; //this can be whatever
            int[] pivotValue = x[pivot];
            int storage=left;

            x[pivot] = x[right];
            x[right]=pivotValue;
            for(int i =left; i < right; i++){//for each number, if its less than the pivot, move it to the left, otherwise leave it on the right
                if(x[i][0] < pivotValue[0]){
                    int[] temp =x[storage];
                    x[storage] = x[i];
                    x[i]=temp;
                    storage++;
                }
            }
            x[right]=x[storage];
            x[storage]=pivotValue;//move the pivot to its correct absolute location in the list

            //pick the correct half of the list you need to parse through to find your K, and ignore the other half
            if(storage < k)
                left = storage+1;
            else//storage>= k
                right = storage;
        }
        return x[k];
    }

    public static int[] randomArray(int min,int max,int num){
        List ar = new ArrayList();
        for (int i = min; i < max; i++) {
            ar.add(i);
        }
        int [] toArray = new int[num];
        for(int j = 0 ; j < toArray.length; j++){
            double d  = (Math.random()*(ar.size()));
            int index = (int)d;
            toArray[j]= (int)ar.get(index);
            ar.remove(ar.get(index));
        }
        return toArray;
    }
    public static int[] findMax(int[][] nums){
        if( nums == null && nums.length == 0 ) return new int[]{-1,-1};
        if( nums.length == 1 ) return nums[0];
        int[] temp = {0,Integer.MIN_VALUE};
        for(int i = 0; i < nums.length; i++){
            if(nums[i][1] > temp[1]){
                temp[0] = nums[i][0];
                temp[1] = nums[i][1];
            }
        }
        return temp;
    }

    public static int[] findAndDelete(int[][] nums){
        if( nums == null && nums.length == 0 ) return new int[]{-1,-1};
        int[] optimalPoint = findMax(nums);
        int p = nums.length;
        int[][] res = new int[nums.length][];
        int flag=0;
        for(int i = 0; i < p; i++) {
            if(nums[i][0] > optimalPoint[0]) {
                res[flag] = nums[i];
                flag++;
            }
        }


        return optimalPoint;
        /*
        LinkedList<int[]> res = new LinkedList<>();
        int[] median = findMedian(nums,(nums.length-1)/2); //O(n)
        int[][] left = new int[nums.length][2];
        int[][] right = new int[nums.length][2];
        int leftsize = 0, rightsize = 0;
        for(int i = 0; i< nums.length; i++){ //O(n)
            if(nums[i][0] < median[0]) {
                left[i] = nums[i];
                leftsize++;
            }
            if(nums[i][0] > median[0]){
                right[i] = nums[i];
                rightsize++;
            }
        }
        while(left.length != 0){
            int[] optimalPoint = findMax(left);
            res.add(optimalPoint);
            */
    }
    public static LinkedList<int[]> method(int[][] nums){
        LinkedList<int[]> res = new LinkedList<>();
        int[] medain = findMedian(nums,(nums.length-1)/2); //O(n)
        int[][] left = new int[(nums.length-1)/2][];
        int[][] right = new int[nums.length-left.length][];
        for(int i = 0; i < (nums.length-1)/2; i++){          //O(n)
            left[i] = nums[i];
        }
        for(int i = 0; i <(nums.length-left.length); i++){
            right[i] = nums[(nums.length-1)/2+i];
        }


        int[][] leftres = new int[nums.length][];
        int[][] rightres = new int[nums.length][];
        int i = 0, j = 0;
                                               //two while run in O(h) in total
        while(left.length != 0){
            int[] optimalPoint = findMax(left);
            int p = left.length;
            int[][] tres = new int[left.length][];
            int flag=0;
            for(int k = 0; k < p; k++) {
                if(left[k][0] > optimalPoint[0]) {
                    tres[flag] = left[k];
                    flag++;
                }
            }
            if(flag == 0)
                left = new int[0][];
            else
                left = Arrays.copyOf(tres,flag);
            leftres[i] = optimalPoint;
            i++;
        }
        while(right.length !=0 ){
            int[] optimalPoint = findMax(right);
            int p = right.length;
            int[][] tres = new int[right.length][];
            int flag=0;
            for(int k = 0; k < p; k++) {
                if(right[k][0] > optimalPoint[0]) {
                    tres[flag] = right[k];
                    flag++;
                }
            }
            if(flag == 0)
                right = new int[0][];
            else
                right = Arrays.copyOf(tres,flag);

            rightres[j] = optimalPoint;
            j++;
        }
        if(j>0){


            int[] temp = {0,Integer.MIN_VALUE};
            for(int k = 0; k < nums.length; k++){
                if(nums[k][1] > temp[1]){
                    temp[0] = nums[k][0];
                    temp[1] = nums[k][1];
                }
            }
            int[] rightmax = temp;
            for(int k = 0; k < i; k++){
                if(leftres[k][1] > rightmax[1]){
                    res.add(leftres[k]);
                }
            }
        }

        for(int k = 0; k < j; k++){
            res.add(rightres[k]);
        }
        return res;
    }
    public static void main(String[] args) {
        int numOfPoints = 20000;
        int rangeOfPoints = 200000;
        int[] x = randomArray(0, rangeOfPoints, numOfPoints);
        int[] y = randomArray(0, rangeOfPoints, numOfPoints);
        int[][] points = new int[numOfPoints][2];
        for (int i = 0; i < points.length; i++) {
            points[i][0] = x[i];
            points[i][1] = y[i];
            //System.out.print("("+points[i][0] + "," + points[i][1]+")");
        }


        long startTime = System.nanoTime();
        LinkedList<int[]> res = method(points);
        long endTime=System.nanoTime();
        long excTime=endTime - startTime;

        System.out.println(" ");
        System.out.println("Number of points: "+ numOfPoints);
        System.out.println("Number of Pareto-Optimal points: "+ res.size());
        System.out.println("Time Cost: "+ excTime+"ns");
        System.out.println("The Pareto-Optimal points are:");
        for(int[] j : res){
            System.out.println("("+j[0] + "," +j[1]+")");
        }


    }
}
