import java.util.LinkedList;

public class ParetoOptimal {
//-----------------O(nh)---------------------------------------
    public static LinkedList<int[]> method(int[][] nums){
        int x = Integer.MAX_VALUE, y = Integer.MIN_VALUE;
        LinkedList<int[]> res = new LinkedList<>();
        int y_max = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++){
                if(nums[i][1]> y_max)
                    y_max = nums[i][1];
        }
        int x_min = Integer.MAX_VALUE;
        for(int i = 0; i < nums.length; i++){
            if(nums[i][0]< x_min)
                x_min = nums[i][0];
        }
        int[] point = null;
        while(y < y_max || x > x_min){
            point = new int[2];
            point[0] = Integer.MIN_VALUE;
            point[1] = Integer.MIN_VALUE;
            for (int i = 0; i < nums.length; i++) {
                /*
                if (nums[i][0] == x && nums[i][1] > y) {//若上方有点
                    if (nums[i][0] > point[0]) {
                        point[0] = nums[i][0];point[1] = nums[i][1];
                    }
                    if (nums[i][0] == point[0] && nums[i][1] < point[1]) {
                        point[0] = nums[i][0];point[1] = nums[i][1];
                    }
                }else if (nums[i][0] < x && nums[i][1] == y) {//若左方有点
                    if (nums[i][0] > point[0]) {
                        point[0] = nums[i][0];point[1] = nums[i][1];
                    }
                    if (nums[i][0] == point[0] && nums[i][1] < point[1]) {
                        point[0] = nums[i][0];point[1] = nums[i][1];
                    }
                }else if (nums[i][0] < x && nums[i][1] > y){//若左上方有点
                    if (nums[i][0] > point[0]) {
                        point[0] = nums[i][0];point[1] = nums[i][1];
                    }
                    if (nums[i][0] == point[0] && nums[i][1] < point[1]) {
                        point[0] = nums[i][0]; point[1] = nums[i][1];
                    }
                }*/
                if (nums[i][0] <= x && nums[i][1] > y) {
                    if (nums[i][0] > point[0] ) {
                        point[0] = nums[i][0];
                        point[1] = nums[i][1];
                    }else if(nums[i][0] == point[0] && nums[i][1] < point[1]){
                        point[0] = nums[i][0];
                        point[1] = nums[i][1];
                    }
                }
                if (nums[i][0] < x && nums[i][1] >= y) {
                    if (nums[i][0] > point[0] ) {
                        point[0] = nums[i][0];
                        point[1] = nums[i][1];
                    }else if(nums[i][0] == point[0] && nums[i][1] < point[1]){
                        point[0] = nums[i][0];
                        point[1] = nums[i][1];
                    }
                }
            }
            x = point[0];
            y = point[1];
            res.add(point);
        }
        return res;
    }
    public static void main(String []args){
        int[][] nums = new int[][] {{3,1},{4,0},{5,1},{0,0},{0,1},{4,2},{1,2},{3,2},{2,2},{5,0},{1,3},{0,3},{2,1},{4,1},{3,0}};
        LinkedList<int[]> res = method(nums);
        for(int[] i : res){
            System.out.println(i[0] + "," +i[1]);
        }


    }
}
